import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors; // Importações necessárias

      
List <String> urls = new ArrayList <String> (); // inicializa o array de URLs
Collections.addAll (urls, args); // leia os URLs da entrada "Parâmetros" e os adicione ao array
Pool ExecutorService = Executors.newFixedThreadPool (urls.size ()); // inicializa o pool de tarefas futuras com número de threads igual ao tamanho dos URLs fornecidos
para (String url: urls) {// para cada URL da lista
   final String currentURL = url;
   pool.submit (new Runnable () {// Sumbit um novo thread que executará a solicitação GET

       @Override
       public void run () {
           try {
               HttpClient client = new DefaultHttpClient (); // Use Apache Commons HTTPClient para executar a solicitação GET
  HttpGet get = new HttpGet (currentURL);
     HttpResponse response = client.execute (get);
HttpEntity entity = response.getEntity ();
EntityUtils.consume (entity);
           } catch (exceção ex) {
               ex.printStackTrace ();
           }

       }
   });
}
pool.shutdown (); // desligar o pool de threads
